from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter,Command
from aiogram import F,Router
from aiogram.fsm.context import FSMContext
from loader import bot, rq , chk
from config import today
from icecream import ic
from app.keyboard import keyboard_Inline, keyboard_Markup, keyboard_YesNo, keyboard_right, create_keyboard_select, keyboard_back, create_keyboard_edit, cancel
from random import randint
from aiogram.enums.parse_mode import ParseMode

router = Router()

@router.message(CommandStart())
async def start_reaction(message: Message, state : FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç drnkt-bot. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ç—ã –ø—Ä–∏—Å—ã–ª–∞–ª –º–Ω–µ —á–µ–∫–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ¬´–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤ –§–ù–°¬ª: –ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∂–º–∏ ¬´–î–µ–π—Å—Ç–≤–∏—è —Å —á–µ–∫–æ–º - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è - —Ñ–æ—Ä–º–∞—Ç html - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ telegram - drnkt_bot. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–µ—Ä–Ω—ã–π –ª–∏ –∞–¥—Ä–µ—Å —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ —á–µ–∫–µ!")

@router.message(F.content_type.in_(["document"]))
# @router.message()
async def add_cheque(message : Message,state : FSMContext):
    try :
        file_id = message.document.file_id
        file_name = message.document.file_name
    except:
        await message.answer("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë")
        ### –Ω–µ –º–µ–Ω—è–µ–º —Å–∏–µ–π—Ç
        return
    
    try:
        response = await chk.check_all(file_id = message.document.file_id,file_name = message.document.file_name)
    except Exception as err:
        err = err.args[0]        
        if err in ["–ù–µ—Ç —Ñ–∞–π–ª–∞","–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ .html","–≠—Ç–æ –Ω–µ –∫–∞—Å—Å–æ–≤—ã–π —á–µ–∫"]:
            await message.answer(err + ", –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            #### –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
            return
    await state.set_data(response)
    await state.update_data(user_name = message.from_user.username)
    if not response["–ê–¥—Ä–µ—Å"]:
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é")
        await state.set_state("update address")
        return
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    await state.set_state("take company name")


@router.message(StateFilter("update address"))
async def update_address(message : Message, state : FSMContext):
    # ic(message.text)
    await state.update_data(–ê–¥—Ä–µ—Å = message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    await state.set_state("take company name")

    
@router.message(StateFilter("take company name"))
async def take_company_name(message : Message, state : FSMContext):
    await state.update_data(–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏ = message.text)
    await state.set_state("comment")
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",reply_markup=keyboard_YesNo)

@router.callback_query(F.data == "Yes",StateFilter("comment"))
async def callback_Yes(call : CallbackQuery,state : FSMContext):
    await bot.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",call.from_user.id,call.message.message_id)
    await state.set_state("add comment")

@router.message(StateFilter("add comment"))
async def add_commentRight(message : Message, state : FSMContext):
    await state.update_data(–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π = message.text)
    data = await state.get_data()
    await message.answer(
        f"<U><I>–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞</I></U>\n‚òïÔ∏è <B>{data["–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏"]}.</B>\nüëè –ö–∞—Ä—Ç–æ—á–∫—É –≤–Ω–µ—Å @{data["user_name"]} üëè\nüèõÔ∏è {data["–ê–¥—Ä–µ—Å"]};\n‚åöÔ∏è {data["–î–∞—Ç–∞"]};\nüßæ –ù–æ–º–µ—Ä —á–µ–∫–∞:{data["–ß–µ–∫ ‚Ññ"]};\n–§–î {data["–§–î"]};\n–°–º–µ–Ω–∞ {data["–°–º–µ–Ω–∞ ‚Ññ"]};\n–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –§–î/–°–º–µ–Ω–∞ = {round(int(data["–§–î"])/int(data["–°–º–µ–Ω–∞ ‚Ññ"]))};\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : {data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]}.",reply_markup=keyboard_right,parse_mode=ParseMode.HTML)
    await state.set_state("right")

@router.callback_query(F.data == "No",StateFilter("comment"))
async def callback_No(call : CallbackQuery, state : FSMContext):
    await state.update_data(–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π = None)
    data = await state.get_data()
    await bot.edit_message_text(
        f"<U><I>–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞</I></U>\n‚òïÔ∏è <B>{data["–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏"]}.</B>\nüëè –ö–∞—Ä—Ç–æ—á–∫—É –≤–Ω–µ—Å @{data["user_name"]} üëè\nüèõÔ∏è {data["–ê–¥—Ä–µ—Å"]};\n‚åöÔ∏è {data["–î–∞—Ç–∞"]};\nüßæ –ù–æ–º–µ—Ä —á–µ–∫–∞:{data["–ß–µ–∫ ‚Ññ"]};\n–§–î {data["–§–î"]};\n–°–º–µ–Ω–∞ {data["–°–º–µ–Ω–∞ ‚Ññ"]};\n–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –§–î/–°–º–µ–Ω–∞ = {round(int(data["–§–î"])/int(data["–°–º–µ–Ω–∞ ‚Ññ"]))};\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : {data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]}.",call.from_user.id,call.message.message_id,reply_markup=keyboard_right,parse_mode=ParseMode.HTML)
    await state.set_state("right")

@router.callback_query(F.data == "Yes",StateFilter("right"))
async def callback_Yes_right(call : CallbackQuery,state : FSMContext):
    data = await state.get_data()
    ### –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–¥
    with rq:
        rq.write_insert("cards",[
            ("id_telegram",call.from_user.id),
            ("user_name_telegram",call.from_user.username),
            ("company_name",data["–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏"]),
            ("date_time",data["–î–∞—Ç–∞"]),
            ("address",data["–ê–¥—Ä–µ—Å"]),
            ("cheque_number",data["–ß–µ–∫ ‚Ññ"]),
            ("FD",data["–§–î"]),
            ("shift_number",data["–°–º–µ–Ω–∞ ‚Ññ"]),
            ("Comment",data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
            ])
    ###
    await bot.edit_message_text("–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",call.from_user.id,call.message.message_id)
    await state.clear()

@router.callback_query(F.data == "No",StateFilter("right"))
async def callback_No(call : CallbackQuery, state : FSMContext):
    await state.clear()
    await bot.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ html",call.from_user.id,call.message.message_id)
    await state.set_state("waiting cheque.html")

@router.message(Command("search"))
async def search(message : Message, state : FSMContext):
    await state.clear()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–ª–∏—Ü—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫")
    await state.set_state("await search")

@router.message(StateFilter("await search"))
async def await_search(message : Message, state : FSMContext):
    if len(message.text) < 3:
        await message.answer("–°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3-—ë—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(filter = message.text, type = "text")
    with rq:
        res =rq.select_many("cards",["id", "company_name", "address"],f'address LIKE "%{message.text}%"')
    if not res:
        await message.answer("–ü–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ",reply_markup=create_keyboard_select(res))
    await state.set_state("id")
    
@router.callback_query(F.data.startswith("id"),StateFilter("id"))
async def get_card(call : CallbackQuery, state : FSMContext):
    state_data = await state.get_data()
    with rq:
        res = rq.select_one("cards",["@*"],f'"id"={call.data.split()[-1]}')
    columns = ("id","id_telegram","user_name","–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏","–î–∞—Ç–∞","–ê–¥—Ä–µ—Å","–ß–µ–∫ ‚Ññ","–§–î","–°–º–µ–Ω–∞ ‚Ññ","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    data = dict(zip(columns,res))
    if data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] == "None":
        data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = " --- "
    text_message = f" ‚òïÔ∏è<B>{data["–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏"]}.</B>\nüëè –ö–∞—Ä—Ç–æ—á–∫—É –≤–Ω–µ—Å @{data["user_name"]} üëè\nüèõÔ∏è {data["–ê–¥—Ä–µ—Å"]};\n‚åöÔ∏è {data["–î–∞—Ç–∞"]};\nüßæ –ù–æ–º–µ—Ä —á–µ–∫–∞:{data["–ß–µ–∫ ‚Ññ"]};\n–§–î {data["–§–î"]};\n–°–º–µ–Ω–∞ {data["–°–º–µ–Ω–∞ ‚Ññ"]};\n–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –§–î/–°–º–µ–Ω–∞ = {round(int(data["–§–î"])/int(data["–°–º–µ–Ω–∞ ‚Ññ"]))};\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : {data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]}."
    if state_data["type"] == "id":
        await bot.edit_message_text(text_message,call.from_user.id,call.message.message_id,reply_markup=create_keyboard_edit(call.data.split()[-1]),parse_mode=ParseMode.HTML)
    elif state_data["type"] == "text":
        await bot.edit_message_text(text_message,call.from_user.id,call.message.message_id,reply_markup=keyboard_back,parse_mode=ParseMode.HTML)
    await state.set_state("button")

@router.callback_query(StateFilter("button"),F.data.startswith("edit"))
async def button(call : CallbackQuery, state : FSMContext):
    await state.update_data(edit = call.data.split(",")[1],id =call.data.split(",")[2] )
    if "address" in call.data:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å",reply_markup=cancel)
    elif "company_name" in call.data:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",reply_markup=cancel)
    elif "Comment" in call.data:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",reply_markup=cancel)
    await state.set_state("edit await")
    await call.answer()


@router.message(StateFilter("edit await"))
async def edit_await(message : Message,state : FSMContext):
    state_data = await state.get_data()
    with rq:
        if message.text != "–û—Ç–º–µ–Ω–∞ ‚ùå":
            rq.write_update("cards",[(state_data["edit"],message.text)],f'id = {state_data["id"]}')
        res = rq.select_one("cards", ["@*"], f'id = {state_data["id"]}')
    columns = ("id","id_telegram","user_name","–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏","–î–∞—Ç–∞","–ê–¥—Ä–µ—Å","–ß–µ–∫ ‚Ññ","–§–î","–°–º–µ–Ω–∞ ‚Ññ","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    data = dict(zip(columns,res))
    if data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] == "None":
        data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = " --- "
    await message.answer(
            f"‚òïÔ∏è <B>{data["–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏"]}.</B>\nüëè –ö–∞—Ä—Ç–æ—á–∫—É –≤–Ω–µ—Å @{data["user_name"]} üëè\nüèõÔ∏è {data["–ê–¥—Ä–µ—Å"]};\n‚åöÔ∏è {data["–î–∞—Ç–∞"]};\nüßæ –ù–æ–º–µ—Ä —á–µ–∫–∞:{data["–ß–µ–∫ ‚Ññ"]};\n–§–î {data["–§–î"]};\n–°–º–µ–Ω–∞ {data["–°–º–µ–Ω–∞ ‚Ññ"]};\n–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –§–î/–°–º–µ–Ω–∞ = {round(int(data["–§–î"])/int(data["–°–º–µ–Ω–∞ ‚Ññ"]))};\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : {data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]}.",reply_markup=create_keyboard_edit(state_data["id"]),parse_mode=ParseMode.HTML)
    await state.set_state("button")

@router.callback_query(StateFilter("button"),F.data == "Back")
async def back(call :CallbackQuery,state: FSMContext):
    data = await state.get_data()
    if data["type"] == "id":
        with rq:
            res =rq.select_many("cards",["id", "company_name", "address"],f'id_telegram = {data["filter"]}')
    elif data["type"] == "text":
        with rq:
            res =rq.select_many("cards",["id", "company_name", "address"],f'address LIKE "%{data["filter"]}%"')
    await bot.edit_message_text("–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ",call.from_user.id,call.message.message_id,reply_markup=create_keyboard_select(res))
    await state.set_state("id")

@router.message(Command("edit"))
async def list_my_cards(message : Message, state : FSMContext):
    await state.clear()
    await state.update_data(type = "id",filter = message.from_user.id)
    with rq:
        res =rq.select_many("cards",["id", "company_name", "address"],f'id_telegram = {message.from_user.id}')
    if not res:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ",reply_markup=create_keyboard_select(res))
    await state.set_state("id")


